# -*- coding: utf-8 -*-
"""Carnavalla_Jamie - Advanced Global Portfolio Management Term Paper (08.2024)_v.FINAL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YB3xuOuNbIhA7xZZIql9KNa24C_PAyNV
"""

#Step 1: Set active directory and import necessary libraries for simulation of investment events
import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime

#Step 2: Collect data.
#Download historical asset performance data using tickers.
#Different asset types detailed below.
#  Equities: Measured by tracking the S&P 500 index using ticker 'SPY'
#  Bonds: Measured by tracking BlackRock's iShares 20+ Year Treasury Bond ETF using ticker 'TLT'
#  Real Estate: An alternative asset measured by tracking REITs using ticker 'VNQ'
#  Gold (Commodity): Tracking the 'GLD' index as an alternative asset class
#  Oil (Commodity): Tracking the 'USO' index as an alternative asset class (Oil Price)
#  Commodities (General): Tracking the DBC index

tickers = ["SPY", "TLT", "VNQ" , "GLD", "USO" , "DBC" ]
data = yf.download(tickers, start="2000-01-01", end="2024-06-30")
prices = data['Adj Close']

#Download historical Fed Funds Rate data.
fed_funds_rate_data = yf.download("^IRX", start="2000-01-01", end="2024-06-30")['Adj Close']

#Establish fed funds rate threshold variable
fed_funds_threshold = 1.6

#Define 'low-interest rate periods' as periods where the Fed Funds rate is less than the prespecified threshold
date_mask_internet = (fed_funds_rate_data.index >= pd.to_datetime("2000-01-02")) & (fed_funds_rate_data.index <= pd.to_datetime("2004-06-30"))
date_mask_financial = (fed_funds_rate_data.index >= pd.to_datetime("2008-12-01")) & (fed_funds_rate_data.index <= pd.to_datetime("2015-12-31"))

low_interest_periods_post_internet_bubble = fed_funds_rate_data.loc[date_mask_internet][fed_funds_rate_data.loc[date_mask_internet] < fed_funds_threshold].index
low_interest_periods_post_financial_crisis = fed_funds_rate_data.loc[date_mask_financial][fed_funds_rate_data.loc[date_mask_financial] < fed_funds_threshold].index

if not low_interest_periods_post_internet_bubble.empty:
    print("Start date of low-interest rate period post-internet bubble:", low_interest_periods_post_internet_bubble[0].strftime('%Y-%m-%d'))
else:
    print("No low-interest rate period found post-internet bubble.")

if not low_interest_periods_post_financial_crisis.empty:
    print("Start date of low-interest rate period post-financial crisis:", low_interest_periods_post_financial_crisis[0].strftime('%Y-%m-%d'))
else:
    print("No low-interest rate period found post-financial crisis.")

#Step 4: Set the simulation so that the portfolios price themselves into the market 6 months
#after the start of the Low-Interest Rate period. This can be interpretted as: it takes the investor
#6 months to realize that they are in fact in a low-interest rate environment and change their asset allocation.

def get_pricing_start_index(periods, months=6):
    return periods[months * 21] if len(periods) > months * 21 else periods[-1]

start_index_internet_bubble = "2002-07-11"
start_index_financial_crisis = "2009-05-01"

print("Portfolio Investment Date - Internet Bubble Period: ",start_index_internet_bubble)
print("Portfolio Investment Date - Financial Crisis Period: ",start_index_financial_crisis)

# Define the end of the measurement period (7 years after the low rate period ends)
end_date_internet_bubble = "2011-06-30"
end_date_financial_crisis = "2022-12-31"

print("Portfolio Divestment Date - Internet Bubble Period: ",end_date_internet_bubble)
print("Portfolio Divestment Date - Financial Crisis Period: ",end_date_financial_crisis)

# Calculate returns for each period
prices_post_internet_bubble = prices.loc[start_index_internet_bubble:end_date_internet_bubble]
prices_post_financial_crisis = prices.loc[start_index_financial_crisis:end_date_financial_crisis]

returns_post_internet_bubble = prices_post_internet_bubble.pct_change().dropna()
returns_post_financial_crisis = prices_post_financial_crisis.pct_change().dropna()

#Step 5: Construct various portfolios and establish portfolio weights

#portfolio: "SPY", "TLT", "VXUS" , "AGGG" , "VNQ" , "GLD", "USO" , "PSP" , "DBC"

#Define weights of a Traditional Risky Portfolio
weights_trp = np.array([

    #SPY - US Equities
    0.55,

    #TLT - US Bonds
    0.25,

    #VNQ - Real Estate US
    0.1,

    #GLD - Gold
    0,

    #USO - Oil
    0.05,

    #DBC - Commodities
    .05])

#Define weights of a Balanced Portfolio with Downside Risk Management
weights_bpdrm = np.array([

    #SPY - US Equities
    0.25,

    #TLT - US Bonds
    0.25,

    #VNQ - Real Estate US
    0.15,

    #GLD - Gold
    0.1,

    #USO - Oil
    0.1,

    #DBC - Commodities
    .15])

print(tickers)
print(weights_trp)
print(weights_bpdrm)

#Step 6: Calculate performance metrics for each portfolio in each period
def calculate_portfolio_performance(weights, returns):
    portfolio_return = np.sum(returns.mean() * weights) * 252  # Annualized return
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))  # Annualized volatility
    sharpe_ratio = portfolio_return / portfolio_volatility
    return portfolio_return, portfolio_volatility, sharpe_ratio

trp_performance_internet_bubble = calculate_portfolio_performance(weights_trp, returns_post_internet_bubble)
bpdrm_performance_internet_bubble = calculate_portfolio_performance(weights_bpdrm, returns_post_internet_bubble)

trp_performance_financial_crisis = calculate_portfolio_performance(weights_trp, returns_post_financial_crisis)
bpdrm_performance_financial_crisis = calculate_portfolio_performance(weights_bpdrm, returns_post_financial_crisis)

print("TRP Performance (Post-Internet Bubble):", trp_performance_internet_bubble)
print("BPDRM Performance (Post-Internet Bubble):", bpdrm_performance_internet_bubble)

print("TRP Performance (Post-Financial Crisis):", trp_performance_financial_crisis)
print("BPDRM Performance (Post-Financial Crisis):", bpdrm_performance_financial_crisis)

# Step 7: Monte Carlo Simulation for Each Low-Interest Rate Period
def monte_carlo_simulation(weights, returns, num_simulations=1000, days=252*7):  # 7 years simulation
    portfolio_simulations = np.zeros(num_simulations)
    mean_returns = returns.mean()
    cov_matrix = returns.cov()

    for i in range(num_simulations):
        simulated_returns = np.random.multivariate_normal(mean_returns, cov_matrix, days)
        simulated_portfolio = np.cumprod(np.dot(simulated_returns, weights) + 1)
        portfolio_simulations[i] = simulated_portfolio[-1]

    return portfolio_simulations

trp_simulation_internet_bubble = monte_carlo_simulation(weights_trp, returns_post_internet_bubble)
bpdrm_simulation_internet_bubble = monte_carlo_simulation(weights_bpdrm, returns_post_internet_bubble)

trp_simulation_financial_crisis = monte_carlo_simulation(weights_trp, returns_post_financial_crisis)
bpdrm_simulation_financial_crisis = monte_carlo_simulation(weights_bpdrm, returns_post_financial_crisis)

def analyze_simulation_results(simulation_results):
    mean_return = np.mean(simulation_results)
    volatility = np.std(simulation_results)
    sharpe_ratio = mean_return / volatility
    max_drawdown = np.min(simulation_results)  # Simplified drawdown calculation

    return mean_return, volatility, sharpe_ratio, max_drawdown

trp_analysis_internet_bubble = analyze_simulation_results(trp_simulation_internet_bubble)
bpdrm_analysis_internet_bubble = analyze_simulation_results(bpdrm_simulation_internet_bubble)

trp_analysis_financial_crisis = analyze_simulation_results(trp_simulation_financial_crisis)
bpdrm_analysis_financial_crisis = analyze_simulation_results(bpdrm_simulation_financial_crisis)

print("TRP Analysis (Post-Internet Bubble):", trp_analysis_internet_bubble)
print("BPDRM Analysis (Post-Internet Bubble):", bpdrm_analysis_internet_bubble)

print("TRP Analysis (Post-Financial Crisis):", trp_analysis_financial_crisis)
print("BPDRM Analysis (Post-Financial Crisis):", bpdrm_analysis_financial_crisis)

# Step 7: Visualization
plt.figure(figsize=(14, 7))

plt.subplot(1, 2, 1)
plt.hist(trp_simulation_internet_bubble, bins=50, alpha=0.5, label='TRP')
plt.hist(bpdrm_simulation_internet_bubble, bins=50, alpha=0.5, label='BPDRM')
plt.title('Monte Carlo Simulation (Post-Internet Bubble)')
plt.xlabel('Portfolio Value')
plt.ylabel('Frequency')
plt.legend(loc='upper right')

plt.subplot(1, 2, 2)
plt.hist(trp_simulation_financial_crisis, bins=50, alpha=0.5, label='TRP')
plt.hist(bpdrm_simulation_financial_crisis, bins=50, alpha=0.5, label='BPDRM')
plt.title('Monte Carlo Simulation (Post-Financial Crisis)')
plt.xlabel('Portfolio Value')
plt.ylabel('Frequency')
plt.legend(loc='upper right')

plt.show()

# Calculate cumulative returns
cumulative_returns_trp = (1 + returns_post_internet_bubble.dot(weights_trp)).cumprod()
cumulative_returns_bpdrm = (1 + returns_post_internet_bubble.dot(weights_bpdrm)).cumprod()

plt.figure(figsize=(10, 6))
plt.plot(cumulative_returns_trp, label="TRP")
plt.plot(cumulative_returns_bpdrm, label="BPDRM")
plt.title("Cumulative Return Comparison (Post-Internet Bubble)")
plt.xlabel("Date")
plt.ylabel("Cumulative Return")
plt.legend()
plt.show()

# Calculate cumulative returns
cumulative_returns_trp = (1 + returns_post_financial_crisis.dot(weights_trp)).cumprod()
cumulative_returns_bpdrm = (1 + returns_post_financial_crisis.dot(weights_bpdrm)).cumprod()

plt.figure(figsize=(10, 6))
plt.plot(cumulative_returns_trp, label="TRP")
plt.plot(cumulative_returns_bpdrm, label="BPDRM")
plt.title("Cumulative Return Comparison (Post-Financial Crisis)")
plt.xlabel("Date")
plt.ylabel("Cumulative Return")
plt.legend()
plt.show()

# Calculate cumulative returns for each portfolio (Post-Internet Bubble period)
cumulative_returns_trp_internet = (1 + returns_post_internet_bubble.dot(weights_trp)).cumprod()
cumulative_returns_bpdrm_internet = (1 + returns_post_internet_bubble.dot(weights_bpdrm)).cumprod()

# Define the function to calculate maximum drawdown
def calculate_max_drawdown(cumulative_returns):
    running_max = cumulative_returns.cummax()
    drawdown = (cumulative_returns / running_max) - 1
    max_drawdown = drawdown.min()
    return max_drawdown

# Calculate maximum drawdowns for the Post-Internet Bubble period
max_drawdown_trp_internet = calculate_max_drawdown(cumulative_returns_trp_internet)
max_drawdown_bpdrm_internet = calculate_max_drawdown(cumulative_returns_bpdrm_internet)

# Plot the Maximum Drawdown Comparison for Post-Internet Bubble period
plt.figure(figsize=(7, 5))
plt.bar(["TRP", "BPDRM"], [max_drawdown_trp_internet, max_drawdown_bpdrm_internet])
plt.title("Maximum Drawdown Comparison (Post-Internet Bubble)")
plt.ylabel("Maximum Drawdown")
plt.show()

# Calculate cumulative returns for each portfolio (Post-Financial Crisis period)
cumulative_returns_trp_financial = (1 + returns_post_financial_crisis.dot(weights_trp)).cumprod()
cumulative_returns_bpdrm_financial = (1 + returns_post_financial_crisis.dot(weights_bpdrm)).cumprod()

# Calculate maximum drawdowns for the Post-Financial Crisis period
max_drawdown_trp_financial = calculate_max_drawdown(cumulative_returns_trp_financial)
max_drawdown_bpdrm_financial = calculate_max_drawdown(cumulative_returns_bpdrm_financial)

# Plot the Maximum Drawdown Comparison for Post-Financial Crisis period
plt.figure(figsize=(7, 5))
plt.bar(["TRP", "BPDRM"], [max_drawdown_trp_financial, max_drawdown_bpdrm_financial])
plt.title("Maximum Drawdown Comparison (Post-Financial Crisis)")
plt.ylabel("Maximum Drawdown")
plt.show()

# Define the function to calculate the rolling Sharpe ratio
def calculate_rolling_sharpe_ratio(returns, weights, window=252):
    # Calculate portfolio returns
    portfolio_returns = returns.dot(weights)
    # Calculate the rolling mean and standard deviation
    rolling_mean = portfolio_returns.rolling(window).mean()
    rolling_std = portfolio_returns.rolling(window).std()
    # Calculate the rolling Sharpe ratio (annualized)
    rolling_sharpe = (rolling_mean / rolling_std) * np.sqrt(252)
    return rolling_sharpe

# Calculate rolling Sharpe ratios for Post-Internet Bubble period
rolling_sharpe_trp_internet = calculate_rolling_sharpe_ratio(returns_post_internet_bubble, weights_trp)
rolling_sharpe_bpdrm_internet = calculate_rolling_sharpe_ratio(returns_post_internet_bubble, weights_bpdrm)

# Calculate standard deviations and variances
std_trp_internet = rolling_sharpe_trp_internet.std()
var_trp_internet = rolling_sharpe_trp_internet.var()

std_bpdrm_internet = rolling_sharpe_bpdrm_internet.std()
var_bpdrm_internet = rolling_sharpe_bpdrm_internet.var()

# Plot the Rolling Sharpe Ratio for Post-Internet Bubble period
plt.figure(figsize=(10, 6))
plt.plot(rolling_sharpe_trp_internet, label=f"TRP (Std: {std_trp_internet:.2f}, Var: {var_trp_internet:.2f})")
plt.plot(rolling_sharpe_bpdrm_internet, label=f"BPDRM (Std: {std_bpdrm_internet:.2f}, Var: {var_bpdrm_internet:.2f})")
plt.title("Rolling Sharpe Ratio (Post-Internet Bubble)")
plt.xlabel("Date")
plt.ylabel("Sharpe Ratio")
plt.legend()
plt.show()

# Calculate rolling Sharpe ratios for Post-Financial Crisis period
rolling_sharpe_trp_financial = calculate_rolling_sharpe_ratio(returns_post_financial_crisis, weights_trp)
rolling_sharpe_bpdrm_financial = calculate_rolling_sharpe_ratio(returns_post_financial_crisis, weights_bpdrm)

# Calculate standard deviations and variances
std_trp_financial = rolling_sharpe_trp_financial.std()
var_trp_financial = rolling_sharpe_trp_financial.var()

std_bpdrm_financial = rolling_sharpe_bpdrm_financial.std()
var_bpdrm_financial = rolling_sharpe_bpdrm_financial.var()

# Plot the Rolling Sharpe Ratio for Post-Financial Crisis period
plt.figure(figsize=(10, 6))
plt.plot(rolling_sharpe_trp_financial, label=f"TRP (Std: {std_trp_financial:.2f}, Var: {var_trp_financial:.2f})")
plt.plot(rolling_sharpe_bpdrm_financial, label=f"BPDRM (Std: {std_bpdrm_financial:.2f}, Var: {var_bpdrm_financial:.2f})")
plt.title("Rolling Sharpe Ratio (Post-Financial Crisis)")
plt.xlabel("Date")
plt.ylabel("Sharpe Ratio")
plt.legend()
plt.show()

from scipy.stats import ttest_ind

t_statistic_internet_bubble, p_value_internet_bubble = ttest_ind(trp_simulation_internet_bubble, bpdrm_simulation_internet_bubble)
t_statistic_financial_crisis, p_value_financial_crisis = ttest_ind(trp_simulation_financial_crisis, bpdrm_simulation_financial_crisis)

print("T-test TRP vs. BPDRM (Post-Internet Bubble):", t_statistic_internet_bubble, p_value_internet_bubble)
print("T-test TRP vs. BPDRM (Post-Financial Crisis):", t_statistic_financial_crisis, p_value_financial_crisis)

def calculate_rolling_sortino_ratio(returns, window=252, target_return=0):
    """
    Calculate the rolling Sortino Ratio for a portfolio.

    :param returns: A pandas Series or DataFrame of portfolio returns.
    :param window: The rolling window size (default is 252 trading days, approximately 1 year).
    :param target_return: The target return or risk-free rate (default is 0).
    :return: A pandas Series of the rolling Sortino ratio.
    """
    # Define a function to calculate Sortino ratio for a given series of returns
    def sortino_ratio(returns, target_return):
        excess_returns = returns - target_return
        downside_deviation = np.sqrt(np.mean(np.minimum(excess_returns, 0) ** 2))
        mean_excess_return = np.mean(excess_returns)
        return mean_excess_return / downside_deviation if downside_deviation != 0 else np.nan

    # Calculate rolling Sortino ratio
    rolling_sortino = returns.rolling(window=window).apply(lambda x: sortino_ratio(x, target_return), raw=True)
    return rolling_sortino

# Example usage:
# Assume 'returns_post_financial_crisis' and 'returns_post_internet_bubble' are DataFrames of daily returns for different portfolios.

# Calculate rolling Sortino ratio for TRP and BPDRM portfolios during the post-Financial Crisis period
rolling_sortino_trp_financial = calculate_rolling_sortino_ratio(returns_post_financial_crisis.dot(weights_trp))
rolling_sortino_bpdrm_financial = calculate_rolling_sortino_ratio(returns_post_financial_crisis.dot(weights_bpdrm))

# Calculate rolling Sortino ratio for TRP and BPDRM portfolios during the post-Internet Bubble period
rolling_sortino_trp_internet = calculate_rolling_sortino_ratio(returns_post_internet_bubble.dot(weights_trp))
rolling_sortino_bpdrm_internet = calculate_rolling_sortino_ratio(returns_post_internet_bubble.dot(weights_bpdrm))

# Visualize the rolling Sortino ratio for the post-Financial Crisis period
plt.figure(figsize=(10, 6))
plt.plot(rolling_sortino_trp_financial, label="TRP (Post-Financial Crisis)")
plt.plot(rolling_sortino_bpdrm_financial, label="BPDRM (Post-Financial Crisis)")
plt.title("Rolling Sortino Ratio (Post-Financial Crisis)")
plt.xlabel("Date")
plt.ylabel("Sortino Ratio")
plt.legend()
plt.show()

# Visualize the rolling Sortino ratio for the post-Internet Bubble period
plt.figure(figsize=(10, 6))
plt.plot(rolling_sortino_trp_internet, label="TRP (Post-Internet Bubble)")
plt.plot(rolling_sortino_bpdrm_internet, label="BPDRM (Post-Internet Bubble)")
plt.title("Rolling Sortino Ratio (Post-Internet Bubble)")
plt.xlabel("Date")
plt.ylabel("Sortino Ratio")
plt.legend()
plt.show()
